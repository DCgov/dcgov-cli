#! /usr/bin/env bash

# OWASP
# other security things
# pa11y

SCANS=()
# Poirot pattern location
PATTERNS="https://raw.githubusercontent.com/DCgov/poirot-patterns/master/default.txt"
# Two other patterns that can be searched by Poirot
# https://raw.githubusercontent.com/DCgov/poirot-patterns/master/financial.txt
# https://raw.githubusercontent.com/DCgov/poirot-patterns/master/ids.txt

check() {
  cmd=$1
  type $cmd >/dev/null 2>&1 || {
    echo "|| ERROR: ${cmd} not found:"
    echo "|| please install ${cmd}"
    exit 1
  }
}

usage(){
	echo -e "\nUsage:\n  $ORG scan [options]\n"
  echo "  Options:"
  echo "  -h, --help               Display this help message"
  echo "  -p, --poirot             Scan entire revision history with Poirot"
  echo "  -a, --accessibility      Scan site accessibility using pa11y"
  echo "  -u, --url                The URL to scan"
  echo "  -q, --quiet              Quiet mode"
	echo ""
}

DIR=$( dirname $0 )
PARENT_DIR=$( dirname "${DIR}" )
ORG=$( cat "${PARENT_DIR}/orgname" )

if [[ $# -eq 0 ]]; then
  usage
  exit 1
fi

# Convert known long options to short options
for arg in "$@"; do
  shift
  case "$arg" in
    --help)
      set -- "$@" "-h"
      ;;
    --quiet)
      set -- "$@" "-q"
      ;;
    --poirot)
      set -- "$@" "-p"
      ;;
    --accessibility)
      set -- "$@" "-a"
      ;;
    --url)
      set -- "$@" "-u"
      ;;
    *)
      set -- "$@" "$arg"
  esac
done

# Reset to beginning of arguments
OPTIND=1

# Process background option flags first
while getopts ":hpqu:a" opt; do
	case "$opt" in
		h )
			usage
			exit 0
			;;
    q )
      exec 1>/dev/null 2>/dev/null
      ;;
    u )
      URL=$OPTARG
      ;;
    p )
      SCANS+=(poirot)
      ;;
    a )
      SCANS+=(a11y)
      ;;
    \? )
      echo -e "Unrecognized option: -$OPTARG\n"
      usage
      exit 1
      ;;
    : )
      echo "The -$OPTARG option requires an argument"
      usage
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

for scan in ${SCANS[@]}; do
  case "$scan" in
    a11y )
      check pa11y
      if [[ -n URL ]]; then
        pa11y --standard WCAG2AA $URL
      else
        echo "An --url is required."
        usage
        exit 1
      fi
      ;;
    poirot )
      poirot --revlist="all" --patterns="${PATTERNS}" --verbose
  esac
done
